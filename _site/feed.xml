<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-12-27T22:16:08+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ZWei</title><subtitle>专注于计算科学、材料科学与物理学的学术博客，分享前沿研究见解与专业知识。</subtitle><entry><title type="html">Ollama模型Tokens输出测试与局域网内设备使用配置</title><link href="http://localhost:4000/ai%20tools/2024/12/27/Ollama%E6%A8%A1%E5%9E%8BTokens%E8%BE%93%E5%87%BA%E6%B5%8B%E8%AF%95%E4%B8%8E%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E8%AE%BE%E5%A4%87%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE.html" rel="alternate" type="text/html" title="Ollama模型Tokens输出测试与局域网内设备使用配置" /><published>2024-12-27T00:00:00+01:00</published><updated>2024-12-27T00:00:00+01:00</updated><id>http://localhost:4000/ai%20tools/2024/12/27/Ollama%E6%A8%A1%E5%9E%8BTokens%E8%BE%93%E5%87%BA%E6%B5%8B%E8%AF%95%E4%B8%8E%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E8%AE%BE%E5%A4%87%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE</id><content type="html" xml:base="http://localhost:4000/ai%20tools/2024/12/27/Ollama%E6%A8%A1%E5%9E%8BTokens%E8%BE%93%E5%87%BA%E6%B5%8B%E8%AF%95%E4%B8%8E%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E8%AE%BE%E5%A4%87%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE.html"><![CDATA[<p>本文介绍如何在局域网内通过手机、平板等设备访问运行在主机上的Ollama开源模型。</p>

<h2 id="不同开源模型输出的tokens速度测试">不同开源模型输出的tokens速度测试</h2>

<p>使用 <code class="language-plaintext highlighter-rouge">--verbose</code> 参数可以实时查看每秒输出的tokens，例如：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ollama run <span class="nt">--verbose</span> qwen2.5-coder:32b
</code></pre></div></div>
<h3 id="qwen25-coder32b">qwen2.5-coder:32b</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>总时长: 2m13.328514583s
加载时长: 25.161ms
提示词评估数量: 33 tokens
提示词评估时长: 10.819s
提示词评估速率: 3.05 tokens/s
生成数量: 611 tokens
生成时长: 2m2.318s
生成速率: 5.00 tokens/s
</code></pre></div></div>

<h3 id="qwen25-coder7b">qwen2.5-coder:7b</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>总时长: 14.339346583s
加载时长: 26.574958ms
提示词评估数量: 33 tokens
提示词评估时长: 2.44s
提示词评估速率: 13.52 tokens/s
生成数量: 246 tokens
生成时长: 11.708s
生成速率: 21.01 tokens/s
</code></pre></div></div>

<h3 id="llama318b">llama3.1:8b</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>总时长: 28.566681417s
加载时长: 27.195334ms
提示词评估数量: 14 tokens
提示词评估时长: 2.426s
提示词评估速率: 5.77 tokens/s
生成数量: 515 tokens
生成时长: 26.112s
生成速率: 19.72 tokens/s
</code></pre></div></div>

<h3 id="qwen2514b-instruct-q8_0">qwen2.5:14b-instruct-q8_0</h3>
<p>注：q8_0为精度设置，相比q4具有更高精度。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>总时长: 1m25.738078416s
加载时长: 27.547791ms
提示词评估数量: 33 tokens
提示词评估时长: 399ms
提示词评估速率: 82.71 tokens/s
生成数量: 542 tokens
生成时长: 1m25.308s
生成速率: 6.35 tokens/s
</code></pre></div></div>

<h2 id="局域网内主机ollama-配置说明">局域网内主机Ollama 配置说明</h2>

<h3 id="内存管理">内存管理</h3>
<p>默认情况下，Ollama在闲置5分钟后会释放所有模型。若需保持模型常驻内存，可设置：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">OLLAMA_KEEP_ALIVE</span><span class="o">=</span><span class="nt">-1</span>
</code></pre></div></div>

<h3 id="网络设置">网络设置</h3>
<p>默认情况下，Ollama仅监听localhost (127.0.0.1)。要允许局域网设备访问，需修改监听地址：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">OLLAMA_HOST</span><span class="o">=</span>0.0.0.0:11434
ollama serve
</code></pre></div></div>
<p>其中0.0.0.0表示监听所有网络接口，11434为默认端口。</p>

<h3 id="客户端支持">客户端支持</h3>
<ul>
  <li>桌面端：Open WebUI</li>
  <li>iPhone：Enchanted</li>
</ul>

<h2 id="通过docker部署open-webui">通过Docker部署Open WebUI</h2>
<p>在主机上我们直接采用 Docker 部署 Open WebUI，因为已经部署了 Ollama，采用如下命令：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-d</span> <span class="nt">-p</span> 3000:8080 <span class="nt">--add-host</span><span class="o">=</span>host.docker.internal:host-gateway <span class="nt">-v</span> open-webui:/app/backend/data <span class="nt">--name</span> open-webui <span class="nt">--restart</span> always ghcr.io/open-webui/open-webui:main
</code></pre></div></div>
<p>其中：<code class="language-plaintext highlighter-rouge">--add-host=host.docker.internal:host-gateway</code> 是为了添加一个主机名映射，将 <code class="language-plaintext highlighter-rouge">host.docker.internal</code> 指向主机的网关，方便容器访问宿主机服务。</p>

<p>假设你之前没有安装过 Ollama，也可以采用如下镜像（打包安装 Ollama + Open WebUI）：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-d</span> <span class="nt">-p</span> 3000:8080 <span class="nt">-v</span> ollama:/root/.ollama <span class="nt">-v</span> open-webui:/app/backend/data <span class="nt">--name</span> &lt;container_name&gt; ghcr.io/open-webui/open-webui:ollama
</code></pre></div></div>
<h2 id="enchanted配置指南">Enchanted配置指南</h2>

<h3 id="设置步骤">设置步骤</h3>
<ol>
  <li>获取PC的IP地址
    <ul>
      <li>Windows：使用<code class="language-plaintext highlighter-rouge">ipconfig</code>命令</li>
      <li>macOS/Linux：使用<code class="language-plaintext highlighter-rouge">ifconfig</code>命令</li>
    </ul>
  </li>
  <li>启动Ollama服务
    <ul>
      <li>确保已运行<code class="language-plaintext highlighter-rouge">ollama serve</code></li>
    </ul>
  </li>
  <li>配置手机端
    <ul>
      <li>在Enchanted中输入服务器地址：<code class="language-plaintext highlighter-rouge">&lt;PC的IP地址&gt;:11434</code></li>
      <li>示例：<code class="language-plaintext highlighter-rouge">192.168.1.100:11434</code></li>
    </ul>
  </li>
  <li>检查防火墙
    <ul>
      <li>确保PC防火墙允许11434端口的入站连接</li>
    </ul>
  </li>
  <li>测试连接
    <ul>
      <li>访问配置的地址确认连接状态</li>
    </ul>
  </li>
</ol>

<p>注意：首次配置Enchanted后可能看不到模型列表，关闭并重启应用后即可正常显示和使用。</p>

<h2 id="lm-studio-使用开源ai大模型">LM Studio 使用开源AI大模型</h2>

<p>还可以通过LM Studio使用开源大模型，在LM Studio中使用方法比较简单，直接在发现页下载模型文件，模型标注MLX是为Apple Silicon的新的framework，在苹果芯片机器上运行比原生模型速度要快很多。</p>]]></content><author><name></name></author><category term="AI tools" /><summary type="html"><![CDATA[本文介绍如何在局域网内通过手机、平板等设备访问运行在主机上的Ollama开源模型。]]></summary></entry><entry><title type="html">AI工具在学术研究中应用</title><link href="http://localhost:4000/ai%20tools/2024/12/26/AI%E5%B7%A5%E5%85%B7%E5%9C%A8%E5%AD%A6%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%AD%E5%BA%94%E7%94%A8.html" rel="alternate" type="text/html" title="AI工具在学术研究中应用" /><published>2024-12-26T00:00:00+01:00</published><updated>2024-12-26T00:00:00+01:00</updated><id>http://localhost:4000/ai%20tools/2024/12/26/AI%E5%B7%A5%E5%85%B7%E5%9C%A8%E5%AD%A6%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%AD%E5%BA%94%E7%94%A8</id><content type="html" xml:base="http://localhost:4000/ai%20tools/2024/12/26/AI%E5%B7%A5%E5%85%B7%E5%9C%A8%E5%AD%A6%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%AD%E5%BA%94%E7%94%A8.html"><![CDATA[<p>自ChatGPT发布以来，人工智能辅助工具在学术研究领域取得了显著突破，为科研工作提供了多维度的支持。本文将系统性地探讨主流AI模型在学术研究中的应用场景，包括代码开发、文献分析、学术写作、文本翻译以及文本重述等方面。</p>

<p>主流大语言模型(LLM)评析：</p>
<ul>
  <li>Claude 3.5 Sonnet: 在代码生成领域展现出卓越的性能表现。</li>
  <li>DeepSeek Coder v3: 具备强大的代码生成能力，并在PDF文档理解和深度分析方面表现突出，特别适合学术文献综述工作（不开启深度思考）。还可以开启深度思考进行推理。主打免费。</li>
  <li>Qwen 2.5 32B: 具有优秀的代码生成能力，可通过Ollama框架实现本地部署，降低了使用成本。本地部署后只能在Terminal中使用。通过docker安装open-webui，可以实现本地网页端使用，界面和Chatgpt类似，非常酷。</li>
  <li>LLaMA 3.1 7B: 轻量级模型，本地部署和实验性应用，对计算资源要求相对较低，装在电脑上玩一玩。</li>
  <li>LLaMA 3.2 70B: 参数规模庞大，对计算硬件要求较高，我的Macmini-M4跑不动。</li>
  <li>ChatGPT: 用了一年多，已放弃，其性能相较于新的AI模型已显示出一定局限性。</li>
</ul>

<p>智能开发环境(IDE)集成解决方案：</p>
<ul>
  <li>Cursor: 提供卓越的AI代码辅助功能，用来静态网站开发、Python编程，还可以写Latex。具有扩展应用潜力，后续将尝试用于机器学习、密度泛函理论(DFT)计算以及分子动力学模拟等写代码科研场景。</li>
  <li>GitHub Copilot: 作为成熟的AI编程助手，通过GitHub Education计划向学生群体提供免费使用权限，但感觉表现与Cursor相比尚有提升空间。</li>
</ul>]]></content><author><name></name></author><category term="AI tools" /><summary type="html"><![CDATA[自ChatGPT发布以来，人工智能辅助工具在学术研究领域取得了显著突破，为科研工作提供了多维度的支持。本文将系统性地探讨主流AI模型在学术研究中的应用场景，包括代码开发、文献分析、学术写作、文本翻译以及文本重述等方面。]]></summary></entry><entry><title type="html">安装Jekyll教程并且上传到Github Page</title><link href="http://localhost:4000/jekyll/2024/12/24/%E5%AE%89%E8%A3%85jekyll.html" rel="alternate" type="text/html" title="安装Jekyll教程并且上传到Github Page" /><published>2024-12-24T00:00:00+01:00</published><updated>2024-12-24T00:00:00+01:00</updated><id>http://localhost:4000/jekyll/2024/12/24/%E5%AE%89%E8%A3%85jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/2024/12/24/%E5%AE%89%E8%A3%85jekyll.html"><![CDATA[<h1 id="安装-jekyll-完整指南">安装 Jekyll 完整指南</h1>

<p>本文将指导你如何在 macOS 系统上正确安装和配置 Jekyll 博客系统。我们将使用 rbenv 来管理 Ruby 版本，这是目前最推荐的方式。</p>

<h2 id="1-环境准备">1. 环境准备</h2>

<h3 id="安装-homebrew">安装 Homebrew</h3>

<p>如果你还没有安装 Homebrew，请先运行以下命令：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<h3 id="安装和配置-rbenv">安装和配置 rbenv</h3>

<p>1) 使用 Homebrew 安装 rbenv：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>rbenv
rbenv init
</code></pre></div></div>

<p>2) 配置 Shell 环境：将以下配置添加到你的 Shell 配置文件中（根据你使用的 Shell 选择）：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 添加到 ~/.zshrc（如果使用 zsh）或 ~/.bash_profile（如果使用 bash）</span>
<span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>rbenv init -<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<p>3) 使配置生效:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 如果使用 zsh</span>
<span class="nb">source</span> ~/.zshrc

<span class="c"># 如果使用 bash</span>
<span class="nb">source</span> ~/.bash_profile
</code></pre></div></div>

<h2 id="2-安装-ruby">2. 安装 Ruby</h2>

<p>1) 查看可用的 Ruby 版本：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rbenv <span class="nb">install</span> <span class="nt">-l</span>
</code></pre></div></div>

<p>2) 安装并配置 Ruby：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 安装最新稳定版 Ruby</span>
rbenv <span class="nb">install </span>3.2.2

<span class="c"># 设置全局 Ruby 版本</span>
rbenv global 3.2.2

<span class="c"># 验证安装（如显示旧版本，需重新加载 Shell 配置）</span>
ruby <span class="nt">-v</span>
</code></pre></div></div>

<h2 id="3-安装-jekyll">3. 安装 Jekyll</h2>

<p>安装 Jekyll 和 Bundler：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>jekyll bundler
</code></pre></div></div>

<h2 id="4-创建新博客">4. 创建新博客</h2>

<p>1) 创建新的 Jekyll 站点：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll new myblog
</code></pre></div></div>

<p>2) 进入项目目录：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>myblog
</code></pre></div></div>

<p>3) 安装依赖：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">install</span>
</code></pre></div></div>

<p>4) 启动本地服务器：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div>

<p>完成以上步骤后，你可以通过访问 <code class="language-plaintext highlighter-rouge">http://localhost:4000</code> 查看你的博客站点。</p>

<h2 id="常见问题解决">常见问题解决</h2>

<p>如果在安装过程中遇到权限相关的问题，请确保：</p>

<ol>
  <li>已正确配置 rbenv</li>
  <li>Shell 配置文件已被正确加载</li>
  <li>使用的是 rbenv 管理的 Ruby 版本而非系统版本</li>
</ol>

<h2 id="注意事项">注意事项</h2>

<ul>
  <li>避免使用 <code class="language-plaintext highlighter-rouge">sudo gem install</code>，这可能会导致权限问题</li>
  <li>确保在执行 Jekyll 命令前已经切换到项目目录</li>
  <li>定期更新 Ruby 和 Jekyll 版本以获取最新的功能和安全修复</li>
</ul>

<h2 id="主题文件位置">主题文件位置</h2>

<p>如果你使用的是默认的 minima 主题，主题文件可以在以下位置找到：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/.rbenv/versions/[ruby-version]/lib/ruby/gems/[gems-version]/gems/minima-[theme-version]
</code></pre></div></div>

<p>例如：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Users/my_host_name/.rbenv/versions/3.3.6/lib/ruby/gems/3.3.0/gems/minima-2.5.2
</code></pre></div></div>

<p><br /></p>

<h1 id="将博客上传到github-page">将博客上传到Github Page</h1>

<h2 id="1-创建-github-仓库">1. 创建 GitHub 仓库</h2>
<ul>
  <li>登录 GitHub，创建一个新的仓库</li>
  <li>仓库名必须为: <code class="language-plaintext highlighter-rouge">{你的GitHub用户名}.github.io</code></li>
  <li>例如,如果你的用户名是 <code class="language-plaintext highlighter-rouge">john</code>，那么仓库名应该是 <code class="language-plaintext highlighter-rouge">john.github.io</code></li>
</ul>

<h2 id="2-在本地创建博客项目">2. 在本地创建博客项目</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 克隆仓库到本地</span>
git clone https://github.com/<span class="o">{</span>用户名<span class="o">}</span>/<span class="o">{</span>用户名<span class="o">}</span>.github.io.git
<span class="nb">cd</span> <span class="o">{</span>用户名<span class="o">}</span>.github.io

<span class="c"># 创建一个简单的首页</span>
<span class="nb">echo</span> <span class="s2">"# Welcome to my blog"</span> <span class="o">&gt;</span> index.md
</code></pre></div></div>

<h2 id="3-提交并推送内容">3. 提交并推送内容</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 添加更改</span>
git add <span class="nb">.</span>

<span class="c"># 提交更改</span>
git commit <span class="nt">-m</span> <span class="s2">"Initial commit"</span>

<span class="c"># 推送到 GitHub</span>
git push <span class="nt">-u</span> origin main
</code></pre></div></div>

<h2 id="4-配置-github-pages">4. 配置 GitHub Pages</h2>
<ul>
  <li>进入仓库的 Settings 页面</li>
  <li>找到 Pages 设置选项</li>
  <li>在 Source 部分选择 main 分支</li>
  <li>保存设置</li>
</ul>

<h2 id="5-维护博客">5. 维护博客</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 创建新文章后</span>
git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"Add new post"</span>
git push
</code></pre></div></div>

<p>几分钟后,你就可以通过 <code class="language-plaintext highlighter-rouge">https://{用户名}.github.io</code> 访问你的博客了。</p>

<p>要注意的几点:</p>
<ul>
  <li>确保仓库是公开的</li>
  <li>Markdown 文件会自动被转换为 HTML</li>
  <li>可以使用自定义域名</li>
  <li>记得在本地预览后再推送更改</li>
</ul>]]></content><author><name></name></author><category term="jekyll" /><summary type="html"><![CDATA[安装 Jekyll 完整指南]]></summary></entry></feed>