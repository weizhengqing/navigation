<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-12-26T22:42:40+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ZWei</title><subtitle>专注于计算科学、材料科学与物理学的学术博客，分享前沿研究见解与专业知识。</subtitle><entry><title type="html">AI工具在学术研究中应用</title><link href="http://localhost:4000/ai%20tools/2024/12/26/AI%E5%B7%A5%E5%85%B7%E5%9C%A8%E5%AD%A6%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%AD%E5%BA%94%E7%94%A8.html" rel="alternate" type="text/html" title="AI工具在学术研究中应用" /><published>2024-12-26T00:00:00+01:00</published><updated>2024-12-26T00:00:00+01:00</updated><id>http://localhost:4000/ai%20tools/2024/12/26/AI%E5%B7%A5%E5%85%B7%E5%9C%A8%E5%AD%A6%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%AD%E5%BA%94%E7%94%A8</id><content type="html" xml:base="http://localhost:4000/ai%20tools/2024/12/26/AI%E5%B7%A5%E5%85%B7%E5%9C%A8%E5%AD%A6%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%AD%E5%BA%94%E7%94%A8.html"><![CDATA[<p>自ChatGPT发布以来，人工智能辅助工具在学术研究领域取得了显著突破，为科研工作提供了多维度的支持。本文将系统性地探讨主流AI模型在学术研究中的应用场景，包括代码开发、文献分析、学术写作、跨语言转换以及文本重构等方面。</p>

<p>主流大语言模型(LLM)评析：</p>
<ul>
  <li>Claude 3.5 Sonnet: 在代码生成领域展现出卓越的性能表现。</li>
  <li>DeepSeek Coder v3: 具备强大的代码生成能力，并在PDF文档理解和深度分析方面表现突出，特别适合学术文献综述工作。</li>
  <li>Qwen 2.5 32B: 具有优秀的代码生成能力，可通过Ollama框架实现本地部署，降低了使用成本。</li>
  <li>LLaMA 3.1 7B: 轻量级模型，适合本地部署和实验性应用，对计算资源要求相对较低。</li>
  <li>LLaMA 3.2 70B: 参数规模庞大，对计算硬件要求较高，需要专业级计算设施支持。</li>
  <li>ChatGPT: 经过长期观察，其性能相较于新一代AI模型已显示出一定局限性。</li>
</ul>

<p>智能开发环境(IDE)集成解决方案：</p>
<ul>
  <li>Cursor: 提供卓越的代码辅助功能，对静态网站开发、Python编程提供全方位支持。具有扩展应用潜力，可用于机器学习、密度泛函理论(DFT)计算以及分子动力学模拟等科研场景。</li>
  <li>GitHub Copilot: 作为成熟的AI编程助手，通过GitHub Education计划向学生群体提供免费使用权限，但在某些应用场景下的表现与Cursor相比尚有提升空间。</li>
</ul>]]></content><author><name></name></author><category term="AI tools" /><summary type="html"><![CDATA[自ChatGPT发布以来，人工智能辅助工具在学术研究领域取得了显著突破，为科研工作提供了多维度的支持。本文将系统性地探讨主流AI模型在学术研究中的应用场景，包括代码开发、文献分析、学术写作、跨语言转换以及文本重构等方面。]]></summary></entry><entry><title type="html">安装Jekyll教程并且上传到Github Page</title><link href="http://localhost:4000/jekyll/2024/12/24/%E5%AE%89%E8%A3%85jekyll.html" rel="alternate" type="text/html" title="安装Jekyll教程并且上传到Github Page" /><published>2024-12-24T00:00:00+01:00</published><updated>2024-12-24T00:00:00+01:00</updated><id>http://localhost:4000/jekyll/2024/12/24/%E5%AE%89%E8%A3%85jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/2024/12/24/%E5%AE%89%E8%A3%85jekyll.html"><![CDATA[<h1 id="安装-jekyll-完整指南">安装 Jekyll 完整指南</h1>

<p>本文将指导你如何在 macOS 系统上正确安装和配置 Jekyll 博客系统。我们将使用 rbenv 来管理 Ruby 版本，这是目前最推荐的方式。</p>

<h2 id="1-环境准备">1. 环境准备</h2>

<h3 id="安装-homebrew">安装 Homebrew</h3>

<p>如果你还没有安装 Homebrew，请先运行以下命令：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<h3 id="安装和配置-rbenv">安装和配置 rbenv</h3>

<p>1) 使用 Homebrew 安装 rbenv：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>rbenv
rbenv init
</code></pre></div></div>

<p>2) 配置 Shell 环境：将以下配置添加到你的 Shell 配置文件中（根据你使用的 Shell 选择）：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 添加到 ~/.zshrc（如果使用 zsh）或 ~/.bash_profile（如果使用 bash）</span>
<span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>rbenv init -<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<p>3) 使配置生效:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 如果使用 zsh</span>
<span class="nb">source</span> ~/.zshrc

<span class="c"># 如果使用 bash</span>
<span class="nb">source</span> ~/.bash_profile
</code></pre></div></div>

<h2 id="2-安装-ruby">2. 安装 Ruby</h2>

<p>1) 查看可用的 Ruby 版本：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rbenv <span class="nb">install</span> <span class="nt">-l</span>
</code></pre></div></div>

<p>2) 安装并配置 Ruby：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 安装最新稳定版 Ruby</span>
rbenv <span class="nb">install </span>3.2.2

<span class="c"># 设置全局 Ruby 版本</span>
rbenv global 3.2.2

<span class="c"># 验证安装（如显示旧版本，需重新加载 Shell 配置）</span>
ruby <span class="nt">-v</span>
</code></pre></div></div>

<h2 id="3-安装-jekyll">3. 安装 Jekyll</h2>

<p>安装 Jekyll 和 Bundler：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>jekyll bundler
</code></pre></div></div>

<h2 id="4-创建新博客">4. 创建新博客</h2>

<p>1) 创建新的 Jekyll 站点：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll new myblog
</code></pre></div></div>

<p>2) 进入项目目录：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>myblog
</code></pre></div></div>

<p>3) 安装依赖：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">install</span>
</code></pre></div></div>

<p>4) 启动本地服务器：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div>

<p>完成以上步骤后，你可以通过访问 <code class="language-plaintext highlighter-rouge">http://localhost:4000</code> 查看你的博客站点。</p>

<h2 id="常见问题解决">常见问题解决</h2>

<p>如果在安装过程中遇到权限相关的问题，请确保：</p>

<ol>
  <li>已正确配置 rbenv</li>
  <li>Shell 配置文件已被正确加载</li>
  <li>使用的是 rbenv 管理的 Ruby 版本而非系统版本</li>
</ol>

<h2 id="注意事项">注意事项</h2>

<ul>
  <li>避免使用 <code class="language-plaintext highlighter-rouge">sudo gem install</code>，这可能会导致权限问题</li>
  <li>确保在执行 Jekyll 命令前已经切换到项目目录</li>
  <li>定期更新 Ruby 和 Jekyll 版本以获取最新的功能和安全修复</li>
</ul>

<h2 id="主题文件位置">主题文件位置</h2>

<p>如果你使用的是默认的 minima 主题，主题文件可以在以下位置找到：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/.rbenv/versions/[ruby-version]/lib/ruby/gems/[gems-version]/gems/minima-[theme-version]
</code></pre></div></div>

<p>例如：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Users/my_host_name/.rbenv/versions/3.3.6/lib/ruby/gems/3.3.0/gems/minima-2.5.2
</code></pre></div></div>

<p><br /></p>

<h1 id="将博客上传到github-page">将博客上传到Github Page</h1>

<h2 id="1-创建-github-仓库">1. 创建 GitHub 仓库</h2>
<ul>
  <li>登录 GitHub，创建一个新的仓库</li>
  <li>仓库名必须为: <code class="language-plaintext highlighter-rouge">{你的GitHub用户名}.github.io</code></li>
  <li>例如,如果你的用户名是 <code class="language-plaintext highlighter-rouge">john</code>，那么仓库名应该是 <code class="language-plaintext highlighter-rouge">john.github.io</code></li>
</ul>

<h2 id="2-在本地创建博客项目">2. 在本地创建博客项目</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 克隆仓库到本地</span>
git clone https://github.com/<span class="o">{</span>用户名<span class="o">}</span>/<span class="o">{</span>用户名<span class="o">}</span>.github.io.git
<span class="nb">cd</span> <span class="o">{</span>用户名<span class="o">}</span>.github.io

<span class="c"># 创建一个简单的首页</span>
<span class="nb">echo</span> <span class="s2">"# Welcome to my blog"</span> <span class="o">&gt;</span> index.md
</code></pre></div></div>

<h2 id="3-提交并推送内容">3. 提交并推送内容</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 添加更改</span>
git add <span class="nb">.</span>

<span class="c"># 提交更改</span>
git commit <span class="nt">-m</span> <span class="s2">"Initial commit"</span>

<span class="c"># 推送到 GitHub</span>
git push <span class="nt">-u</span> origin main
</code></pre></div></div>

<h2 id="4-配置-github-pages">4. 配置 GitHub Pages</h2>
<ul>
  <li>进入仓库的 Settings 页面</li>
  <li>找到 Pages 设置选项</li>
  <li>在 Source 部分选择 main 分支</li>
  <li>保存设置</li>
</ul>

<h2 id="5-维护博客">5. 维护博客</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 创建新文章后</span>
git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"Add new post"</span>
git push
</code></pre></div></div>

<p>几分钟后,你就可以通过 <code class="language-plaintext highlighter-rouge">https://{用户名}.github.io</code> 访问你的博客了。</p>

<p>要注意的几点:</p>
<ul>
  <li>确保仓库是公开的</li>
  <li>Markdown 文件会自动被转换为 HTML</li>
  <li>可以使用自定义域名</li>
  <li>记得在本地预览后再推送更改</li>
</ul>]]></content><author><name></name></author><category term="jekyll" /><summary type="html"><![CDATA[安装 Jekyll 完整指南]]></summary></entry></feed>